# This file holds all the notes and TODO lists for the project Playground

# Python TODO List
	[ ] Add a C function that can be called from the python code
	[ ] See if there is a way to reroute the output of the python script to our own functions for handling
	
	[X] Add a way to call "run" on a plugin using it's class name (should we reformat the class name somehow?)
	[X] Auto-load all python files in the Script folder on startup
	[X] Reload modules that have been changed automatically
	[X] Add a way for the application to detect if a file has changed
	[X] Make a class we can inherit from that the importer checks type against before considering the class to be a plugin
	[X] See if we can get a trace/description of syntax errors in the file or other problems when we are unable to import a module
	[-] Check the number of arguments in defined functions
	[X] Get rid of errors when looking for functions

#Bezier Curve Formulas
dist2(x, y, z, w) = (z-x)^2 + (w-y)^2
dist2(x, y, z, w) = (zz - 2zx + xx) + (ww - 2wy + yy)
linear(a, b) = a + (b-a)t
quad(a, b, c) = a - 2at + 2bt + att - 2btt + ctt
cubic(a, b, c, d) = a - 3at + 3bt + 3att - 6btt + 3ctt - attt + 3bttt - 3cttt + dttt
cubic(a, b, c, d) = a - 3a2t + 3b2t + 3a2tt - 6b2tt + 3c2tt - a2ttt + 3b2ttt - 3c2ttt + d2ttt

dist2(x, y, cubic(a1,b1,c1,d1), cubic(a2,b2,c2,d2)) =
: -2a1x + 6a1tx - 6b1tx - 6a1ttx + 12b1ttx - 6c1ttx + 2a1tttx - 6b1tttx + 6c1tttx - 2d1tttx
: xx + yy
: -2a2y + 6a2ty - 6b2ty - 6a2tty + 12b2tty - 6c2tty + 2a2ttty - 6b2ttty + 6c2ttty - 2d2ttty
: (a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)*(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: a1a1 -3a1a1t + 3a1b1t + 3a1a1tt -6a1b1tt + 3a1c1tt -a1a1ttt + 3a1b1ttt -3a1c1ttt + a1d1ttt
: -3a1ta1 + 9a1a1tt -9a1b1tt -9a1a1ttt + 18a1b1ttt -9a1c1ttt + 3a1a1tttt -9a1b1tttt + 9a1c1tttt -3a1d1tttt
: 3b1t(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: 3a1tt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: -6b1tt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: 3c1tt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: -a1ttt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: 3b1ttt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: -3c1ttt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: d1ttt(a1 - 3a1t + 3b1t + 3a1tt - 6b1tt + 3c1tt - a1ttt + 3b1ttt - 3c1ttt + d1ttt)
: (a2 - 3a2t + 3b2t + 3a2tt - 6b2tt + 3c2tt - a2ttt + 3b2ttt - 3c2ttt + d2ttt)*(a2 - 3a2t + 3b2t + 3a2tt - 6b2tt + 3c2tt - a2ttt + 3b2ttt - 3c2ttt + d2ttt)

: aa - 6aat + 6abt + 15aatt - 30abtt + 6actt - 16aattt + 60abttt - 24acttt + 2adttt + 3aatttt - 48abtttt + 36actttt - 6adtttt + 9bbtt - 36bbttt + 18bcttt + 54bbtttt - 54bctttt + 6bdtttt + 6aattttt + 6abttttt - 12acttttt + 6adttttt - 36bbttttt + 54bcttttt - 12bdttttt + 9cctttt - 18ccttttt + 6cdttttt + 1aatttttt + 6abtttttt - 6actttttt + 2adtttttt + 9bbtttttt - 18bctttttt + 6bdtttttt + 9cctttttt - 6cdtttttt + 1ddtttttt

# Python Argument Format Strings
@s (str or None) [char *] // Convert a null-terminated C string to a Python str object using 'utf-8' encoding. If the C string pointer is NULL, None is used.
@s# (str or None) [char *, int] // Convert a C string and its length to a Python str object using 'utf-8' encoding. If the C string pointer is NULL, the length is ignored and None is returned.
@y (bytes) [char *] // This converts a C string to a Python bytes object. If the C string pointer is NULL, None is returned.
@y# (bytes) [char *, int] // This converts a C string and its lengths to a Python object. If the C string pointer is NULL, None is returned.
@z (str or None) [char *] // Same as s.
@z# (str or None) [char *, int] // Same as s#.
@u (str) [Py_UNICODE *] // Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4) data to a Python Unicode object. If the Unicode buffer pointer is NULL, None is returned.
@u# (str) [Py_UNICODE *, int] // Convert a Unicode (UCS-2 or UCS-4) data buffer and its length to a Python Unicode object. If the Unicode buffer pointer is NULL, the length is ignored and None is returned.
@U (str or None) [char *] // Same as s.
@U# (str or None) [char *, int] // Same as s#.
@i (int) [int] // Convert a plain C int to a Python integer object.
@b (int) [char] // Convert a plain C char to a Python integer object.
@h (int) [short int] // Convert a plain C short int to a Python integer object.
@l (int) [long int] // Convert a C long int to a Python integer object.
@B (int) [unsigned char] // Convert a C unsigned char to a Python integer object.
@H (int) [unsigned short int] // Convert a C unsigned short int to a Python integer object.
@I (int) [unsigned int] // Convert a C unsigned int to a Python integer object.
@k (int) [unsigned long] // Convert a C unsigned long to a Python integer object.
@L (int) [long long] // Convert a C long long to a Python integer object.
@K (int) [unsigned long long] // Convert a C unsigned long long to a Python integer object.
@n (int) [Py_ssize_t] // Convert a C Py_ssize_t to a Python integer.
@c (bytes of length 1) [char] // Convert a C int representing a byte to a Python bytes object of length 1.
@C (str of length 1) [int] // Convert a C int representing a character to Python str object of length 1.
@d (float) [double] // Convert a C double to a Python floating point number.
@f (float) [float] // Convert a C float to a Python floating point number.
@D (complex) [Py_complex *] // Convert a C Py_complex structure to a Python complex number.
@O (object) [PyObject *] // Pass a Python object untouched (except for its reference count, which is incremented by one). If the object passed in is a NULL pointer, it is assumed that this was caused because the call producing the argument found an error and set an exception. Therefore, Py_BuildValue() will return NULL but won’t raise an exception. If no exception has been raised yet, SystemError is set.
@S (object) [PyObject *] // Same as O.
@N (object) [PyObject *] // Same as O, except it doesn’t increment the reference count on the object. Useful when the object is created by a call to an object constructor in the argument list.
@O& (object) [converter, anything] // Convert anything to a Python object through a converter function. The function is called with anything (which should be compatible with void *) as its argument and should return a “new” Python object, or NULL if an error occurred.
@(items) (tuple) [matching-items] // Convert a sequence of C values to a Python tuple with the same number of items.
@[items] (list) [matching-items] // Convert a sequence of C values to a Python list with the same number of items.
@{items} (dict) [matching-items] // Convert a sequence of C values to a Python dictionary. Each pair of consecutive C values adds one item to the dictionary, serving as key and value, respectively. 
